(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{331:function(e,s,n){"use strict";n.r(s);var v=n(41),c=Object(v.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[n("em",[e._v("本文翻译自")]),e._v(" "),n("a",{attrs:{href:"https://arend-lang.github.io/documentation/tutorial/PartI/datanproofs",target:"_blank",rel:"noopener noreferrer"}},[e._v("Arend Tutorial, Part I, Indexed Data Types"),n("OutboundLink")],1),e._v(" "),n("em",[e._v("，原作者为 "),n("a",{attrs:{href:"https://github.com/arend-lang",target:"_blank",rel:"noopener noreferrer"}},[e._v("JetBrains Research HoTT and Dependent Types Group (V. Isaev and F. Part)"),n("OutboundLink")],1),e._v("。原作品在 Apache 2.0 协议下发表。")])]),e._v(" "),n("p",[e._v("在本章里，我们将会通过一系列定义和证明的例子来解释先前我们讨论过的一些概念。")]),e._v(" "),n("p",[e._v("我们将定义函数 "),n("code",[e._v("sort")]),e._v("，他通过插入排序来排序列表；我们还将定义函数 "),n("code",[e._v("reverse")]),e._v(" 来翻转列表。")]),e._v(" "),n("p",[e._v("我们还会讨论两个证明。我们将证明，"),n("code",[e._v("reverse")]),e._v(" 是一个对合，并且 "),n("code",[e._v("+ : Nat -> Nat -> Nat")]),e._v(" 是结合的。")]),e._v(" "),n("p",[e._v("接下来，我们会举出几个数据类型的例子。对于给定的类型 "),n("code",[e._v("A")]),e._v("，我们会给出两种 "),n("code",[e._v("A")]),e._v(" 的定长向量的定义，其中一种基于"),n("em",[e._v("带构造器模式的数据类型")]),e._v("。最后，我们会讨论如何定义「所有有限集合」的类型。")]),e._v(" "),n("h1",{attrs:{id:"插入排序和翻转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#插入排序和翻转"}},[e._v("#")]),e._v(" 插入排序和翻转")]),e._v(" "),n("p",[e._v("在依赖类型语言中，定义起来最简单的排序算法是插入排序。插入排序所使用的递归方法跟 "),n("code",[e._v("List")]),e._v(" 的归纳定义是相对应的。")]),e._v(" "),n("p",[e._v("如果我们的列表是 "),n("code",[e._v("nil")]),e._v("，那么我们只需要返回 "),n("code",[e._v("nil")]),e._v("。如果列表是 "),n("code",[e._v("cons x xs")]),e._v("，那么我们在 "),n("code",[e._v("xs")]),e._v(" 上递归地调用排序并使用（同样基于 "),n("code",[e._v("List")]),e._v(" 上的递归而定义的）函数 "),n("code",[e._v("insert")]),e._v(" 将 "),n("code",[e._v("x")]),e._v(" 插入排序结果。")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\func if {A : \\Type} (b : Bool) (t e : A) : A \\elim b\n  | true => t\n  | false => e\n\n\\func sort {A : \\Type} (less : A -> A -> Bool) (xs : List A) : List A \\elim xs\n  | nil => nil\n  | cons x xs => insert less x (sort less xs)\n  \\where\n    \\func insert {A : \\Type} (less : A -> A -> Bool) (x : A) (xs : List A) : List A \\elim xs\n      | nil => cons x nil\n      | cons x' xs => if (less x x') (cons x (cons x' xs)) (cons x' (insert less x xs))\n")])])]),n("p",[e._v("如果谓词 "),n("code",[e._v("less")]),e._v(" 定义了一个线性序，那么 "),n("code",[e._v("sort")]),e._v(" 函数的结果就会是参数 "),n("code",[e._v("xs")]),e._v(" 的排序后的排列。我们可以在 Arend 里这样描述 "),n("code",[e._v("sort")]),e._v(" 的正确性：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\func isLinOrder {A : \\Type} (lessOrEq : A -> A -> Bool) : \\Type => {?}\n\\func isSorted {A : \\Type} (lessOrEq : A -> A -> Bool) (xs : List A) : \\Type => {?}\n-- isPerm 表明 xs' 是 xs 的一个排列\n\\func isPerm {A : \\Type} (xs xs' : List A) : \\Type => {?}\n\\func sort-isCorrect {A : \\Type} (lessOrEq : A -> A -> Bool) (p : isLinOrder lessOrEq) (xs : List A)\n       : \\Sigma (isSorted lessOrEq (sort lessOrEq xs)) (isPerm xs (sort lessOrEq xs)) => {?}\n")])])]),n("p",[e._v("利用我们到现在为止介绍的语言工具来书写这些谓词的定义和 "),n("code",[e._v("sort-isCorrect")]),e._v(" 的证明是可能的。但是，在接下来几章中我们会看到有更好的方法，所以现在我们先省略这些细节。"),n("a",{attrs:{href:"univserses"}},[e._v("之后")]),e._v("会给出一个明确的证明。")]),e._v(" "),n("p",[e._v("我们现在考虑一个更简单的列表操作——翻转。我们在这里定义函数 "),n("code",[e._v("reverse")]),e._v("，他使用一个附加的函数来翻转列表 "),n("code",[e._v("xs")]),e._v("，这个附加的函数将翻转后的子列表累加在额外的参数 "),n("code",[e._v("acc")]),e._v(" 上：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\func reverse {A : \\Type} (xs : List A) : List A => rev nil xs\n  \\where\n    \\func rev {A : \\Type} (acc xs : List A) : List A \\elim xs\n      | nil => acc\n      | cons x xs => rev (cons x acc) xs\n\n-- reverse (cons x xs) => rev nil (cons x xs) => rev (cons x nil) xs\n-- reverse (reverse (cons x xs)) => reverse (rev (cons x nil) xs) => rev nil (rev (cons x nil) xs)\n")])])]),n("p",[e._v("下面我们证明 "),n("code",[e._v("reverse")]),e._v(" 是一个对合。")]),e._v(" "),n("h1",{attrs:{id:"证明的例子：-assoc-和-reverse-isinvolutive"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#证明的例子：-assoc-和-reverse-isinvolutive"}},[e._v("#")]),e._v(" 证明的例子："),n("code",[e._v("+-assoc")]),e._v(" 和 "),n("code",[e._v("reverse-isInvolutive")])]),e._v(" "),n("p",[e._v("如果你尝试直接通过归纳来证明 "),n("code",[e._v("reverse (reverse xs) = xs")]),e._v("，那么你会在证明 "),n("code",[e._v("rev nil (rev (cons x nil) xs) = cons x xs")]),e._v(" 时卡住；这是因为归纳假设太弱了。于是，我们应该增强命题，以此来增强归纳假设。这里，我们证明 "),n("code",[e._v("reverse.rev")]),e._v(" 的一个更加推广的属性，接着推导出 "),n("code",[e._v("reverse")]),e._v(" 为一个对合的结论：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\func reverse-isInvolutive {A : \\Type} (xs : List A) : reverse (reverse xs) = xs => rev-isInv nil xs\n  \\where\n    \\func rev-isInv {A : \\Type} (acc xs : List A) : reverse (reverse.rev acc xs) = reverse.rev xs acc \\elim xs\n      | nil => idp\n      | cons x xs => rev-isInv (cons x acc) xs\n")])])]),n("p",[e._v("要证明 "),n("code",[e._v("+")]),e._v(" 的结合性，我们需要 "),n("code",[e._v("=")]),e._v(" 的合同性，即对于所有 "),n("code",[e._v("f : A -> B")]),e._v("、"),n("code",[e._v("x, y : A")]),e._v("，如果存在证明 "),n("code",[e._v("p : x = y")]),e._v("，那么存在证明 "),n("code",[e._v("pmap f p : f x = f y")]),e._v("。要证明 "),n("code",[e._v("(x + y) + z = x + (y + z)")]),e._v(" 当然需要归纳法，但是我们应该谨慎选择在哪个参数上归纳。这里，因为我们定义了 "),n("code",[e._v("+")]),e._v(" 是在右手边的参数上进行递归，所以我们应该选择 "),n("code",[e._v("z")]),e._v("：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\func +-assoc (x y z : Nat) : (x + y) + z = x + (y + z) \\elim z\n  | 0 => idp\n  | suc z => pmap suc (+-assoc x y z)\n-- 这里我们可以应用 pmap，因为表达式会这样归约：\n-- (x + y) + suc z => suc ((x + y) + z)\n-- x + (y + suc z) => x + suc (y + z) => suc (x + (y + z))\n")])])]),n("h1",{attrs:{id:"定长列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定长列表"}},[e._v("#")]),e._v(" 定长列表")]),e._v(" "),n("p",[e._v("假定我们现在要实现这样一个函数，他接受一个列表和一个代表索引的自然数，并且返回这个列表中此索引代表的元素。这基本上是不可能的，因为当我们给出一个大于列表长度的索引时我们没法给出结果。解决这个问题的一个方法是，我们传给函数一个「索引小于列表长度」的证明：")]),e._v(" "),n("blockquote",[n("p",[e._v("练习 1：实现函数 "),n("code",[e._v("lookup")]),e._v("，他接受一个列表 "),n("code",[e._v("xs")]),e._v(" 和一个自然数 "),n("code",[e._v("n")]),e._v("，并返回列表的第 "),n("code",[e._v("n")]),e._v(" 个元素。这个函数还应该接受一个 "),n("code",[e._v("n")]),e._v(" 在正确范围内的证明，即 "),n("code",[e._v("T (n < length xs)")]),e._v("。")])]),e._v(" "),n("p",[e._v("另外一个解决方法是，我们使用一种"),n("em",[e._v("向量")]),e._v("类型，也就是一种固定长度的列表，他的长度由一个参数 "),n("code",[e._v("n : Nat")]),e._v(" 指定。实现向量的一个方法是定义一个值域为 "),n("code",[e._v("\\Type")]),e._v(" 的递归函数：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\func vec (A : \\Type) (n : Nat) : \\Type \\elim n\n  | 0 => \\Sigma\n  | suc n => \\Sigma A (vec A n)\n\n\\func head {A : \\Type} (n : Nat) (xs : vec A (suc n)) => xs.1\n\n\\func tail {A : \\Type} (n : Nat) (xs : vec A (suc n)) => xs.2\n")])])]),n("p",[e._v("我们也可以通过实现一个数据类型来定义向量。这有一些难度，因为当 "),n("code",[e._v("n")]),e._v(" 为某个 "),n("code",[e._v("suc m")]),e._v(" 时，数据类型 "),n("code",[e._v("Vec (A : \\Type) (n : Nat)")]),e._v(" 有构造器 "),n("code",[e._v("fcons A (Vec A m)")]),e._v("，但如果 "),n("code",[e._v("n")]),e._v(" 为 "),n("code",[e._v("0")]),e._v("，那么构造器为 "),n("code",[e._v("fnil")]),e._v("。我们可以用"),n("em",[e._v("带模式的构造器")]),e._v("来定义这种数据类型：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\data Vec (A : \\Type) (n : Nat) \\elim n\n  | 0 => fnil\n  | suc n => fcons A (Vec A n)\n\n\\func Head {A : \\Type} {n : Nat} (xs : Vec A (suc n)) : A \\elim xs\n  | fcons x _ => x\n\n\\func Tail {A : \\Type} {n : Nat} (xs : Vec A (suc n)) : Vec A n \\elim xs\n  | fcons _ xs => xs\n")])])]),n("p",[e._v("由于多种原因，我们最好用后面这种使用数据类型的定义方法。首先，"),n("code",[e._v("Vec")]),e._v(" 在这种定义中有具名的构造器，所以我们可以明确看到各种情况下我们在跟哪种构造器打交道。其次，我们可以在模式匹配中用名字来进行匹配，而不是通过 "),n("code",[e._v(".1")]),e._v("、"),n("code",[e._v(".2")]),e._v(" 之类的射影。所以，使用定义 "),n("code",[e._v("Vec")]),e._v(" 比 "),n("code",[e._v("vec")]),e._v(" 要方便许多。")]),e._v(" "),n("p",[e._v("下面我们定义两个函数，他们在 "),n("code",[e._v("n")]),e._v(" 和 "),n("code",[e._v("xs")]),e._v(" 上均进行递归。函数 "),n("code",[e._v("first")]),e._v(" 返回一个向量的第一个元素，而 "),n("code",[e._v("append")]),e._v(" 将一个向量追加到另一个向量。需要注意的是，"),n("code",[e._v("first")]),e._v(" 的输出在空向量上是没有定义的。通常，我们通过将数据类型 "),n("code",[e._v("Maybe")]),e._v(" 作为值域来解决这个问题：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\data Maybe (A : \\Type) | nothing | just A\n\n\\func first {A : \\Type} {n : Nat} (xs : Vec A n) : Maybe A \\elim n, xs\n  | 0, fnil => nothing\n  | suc n, fcons x xs => just x\n\n\\func append {A : \\Type} {n m : Nat} (xs : Vec A n) (ys : Vec A m) : Vec A (m + n) \\elim n, xs\n  | 0, fnil => ys\n  | suc _ , fcons x xs => fcons x (append xs ys)\n")])])]),n("blockquote",[n("p",[e._v("练习 2：对于 "),n("code",[e._v("Vec")]),e._v(" 与 "),n("code",[e._v("vec")]),e._v(" 都实现函数 "),n("code",[e._v("replicate")]),e._v("（这个函数创建一个给定长度的向量，其中所有元素都是某个给定的值）。")])]),e._v(" "),n("blockquote",[n("p",[e._v("练习 3：对于 "),n("code",[e._v("Vec")]),e._v(" 与 "),n("code",[e._v("vec")]),e._v(" 都实现函数 "),n("code",[e._v("map")]),e._v("。")])]),e._v(" "),n("blockquote",[n("p",[e._v("练习 4：对于 "),n("code",[e._v("Vec")]),e._v(" 与 "),n("code",[e._v("vec")]),e._v(" 都实现函数 "),n("code",[e._v("zipWith")]),e._v("，这个函数必须接受两个长度相等的向量。")])]),e._v(" "),n("h1",{attrs:{id:"有限集合与-lookup"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有限集合与-lookup"}},[e._v("#")]),e._v(" 有限集合与 "),n("code",[e._v("lookup")])]),e._v(" "),n("p",[e._v("有许多种方法能够定义一个有限集合类型。比如，我们可以将它定义为 "),n("code",[e._v("Nat")]),e._v(" 的子类型：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\func fin (n : Nat) => \\Sigma (x : Nat) (T (x < n))\n")])])]),n("p",[e._v("或者一个递归函数：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\func Fin' (n : Nat) : \\Set0\n  | 0 => Empty\n  | suc n => Maybe (Fin' n)\n")])])]),n("p",[e._v("或者一个数据类型：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\data Fin (n : Nat) \\with\n  | suc n => { fzero | fsuc (Fin n) }\n")])])]),n("p",[e._v("考虑几个例子：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("-- Fin 0——空类型\n\\func absurd {A : \\Type} (x : Fin 0) : A\n\n\\func fin0 : Fin 3 => fzero\n\\func fin1 : Fin 3 => fsuc fzero\n\\func fin2 : Fin 3 => fsuc (fsuc fzero)\n-- 下面这行没法通过类型检查\n-- \\func fin3 : Fin 3 => fsuc (fsuc (fsuc fzero))\n")])])]),n("p",[e._v("证明 "),n("code",[e._v("Fin 3")]),e._v(" 有不超过三个元素很简单。比如，我们可以证明 "),n("code",[e._v("Fin 3")]),e._v(" 的每个元素要么是 "),n("code",[e._v("fin0")]),e._v("，要么是 "),n("code",[e._v("fin1")]),e._v("，要么是 "),n("code",[e._v("fin2")]),e._v("：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\func atMost3 (x : Fin 3) : Either (x = fin0) (Either (x = fin1) (x = fin2)) \\elim x\n  | fzero => inl idp\n  | fsuc fzero => inr (inl idp)\n  | fsuc (fsuc fzero) => inr (inr idp)\n  | fsuc (fsuc (fsuc ()))\n")])])]),n("p",[e._v("我们可以证明 "),n("code",[e._v("Fin")]),e._v(" 嵌入到了 "),n("code",[e._v("Nat")]),e._v(" 中：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\func toNat {n : Nat} (x : Fin n) : Nat\n  | {suc _}, fzero => 0\n  | {suc _}, fsuc x => suc (toNat x)\n")])])]),n("p",[e._v("类型 "),n("code",[e._v("Fin n")]),e._v(" 有时候会很有用，比如给向量定义一个安全的索引函数：")]),e._v(" "),n("div",{staticClass:"language-arend extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\\func lookup {A : \\Type} {n : Nat} (xs : Vec A n) (i : Fin n) : A \\elim n, xs, i\n  | suc _, fcons x _, fzero => x\n  | suc _, fcons _ xs, fsuc i => lookup xs i\n")])])]),n("blockquote",[n("p",[e._v("练习 5：函数 "),n("code",[e._v("Fin n -> A")]),e._v(" 对应到了一个长度为 "),n("code",[e._v("n")]),e._v("，元素类型为 "),n("code",[e._v("A")]),e._v(" 的向量。实现一个函数，将 "),n("code",[e._v("Fin n -> A")]),e._v(" 转换为 "),n("code",[e._v("Vec A n")]),e._v("。")])]),e._v(" "),n("blockquote",[n("p",[e._v("练习 6：为矩阵定义一个类型，并给这个类型定义以下函数：对角矩阵、转置、矩阵加法和矩阵乘法。")])]),e._v(" "),n("blockquote",[n("p",[e._v("练习 7：定义类型 "),n("code",[e._v("CTree A n")]),e._v(" 为所有高度恰为 "),n("code",[e._v("n")]),e._v(" 的满二叉树，其中叶子节点的高度为 "),n("code",[e._v("0")]),e._v("，所有非叶子节点都存储一个值。")])]),e._v(" "),n("blockquote",[n("p",[e._v("练习 8：定义类型 "),n("code",[e._v("Tree A n")]),e._v(" 为所有高度最多为 "),n("code",[e._v("n")]),e._v(" 的二叉树，其中叶子节点的高度为 "),n("code",[e._v("0")]),e._v("，所有非叶子节点都存储一个值。同时，定义一个函数来计算树的高度。")])])])}),[],!1,null,null,null);s.default=c.exports}}]);