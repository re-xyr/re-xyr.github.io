(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{329:function(e,a,v){"use strict";v.r(a);var _=v(41),t=Object(_.a)({},(function(){var e=this,a=e.$createElement,v=e._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[v("em",[e._v("本文翻译自")]),e._v(" "),v("a",{attrs:{href:"https://arend-lang.github.io/documentation/tutorial/PartI/synndef",target:"_blank",rel:"noopener noreferrer"}},[e._v("Arend Tutorial, Part I, Basics"),v("OutboundLink")],1),e._v(" "),v("em",[e._v("，原作者为 "),v("a",{attrs:{href:"https://github.com/arend-lang",target:"_blank",rel:"noopener noreferrer"}},[e._v("JetBrains Research HoTT and Dependent Types Group (V. Isaev and F. Part)"),v("OutboundLink")],1),e._v("。原作品在 Apache 2.0 协议下发表。")])]),e._v(" "),v("p",[e._v("在本章里，我们将介绍 Arend 语言的语法和一些基本结构，以便接下来学习书写定义、命题和证明。")]),e._v(" "),v("p",[e._v("Arend 有这几种定义：函数、数据、类和记录。现在我们先考滤函数和数据定义；关于类和记录的详细讲解留到"),v("RouterLink",{attrs:{to:"/posts/records.html"}},[e._v("记录和类")]),e._v("一章。")],1),e._v(" "),v("p",[e._v("Arend 本身内置了一些最最基础的定义，并且把他们放在了 Prelude 模块中。比如，Prelude 包含了 "),v("code",[e._v("Nat")]),e._v(" 和 "),v("code",[e._v("Int")]),e._v(" 类型——分别用来存储自然数和整数——以及相等性类型 "),v("code",[e._v("=")]),e._v("。")]),e._v(" "),v("h1",{attrs:{id:"词法结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#词法结构"}},[e._v("#")]),e._v(" 词法结构")]),e._v(" "),v("p",[e._v("Arend 里的所有关键字都由反斜线 "),v("code",[e._v("\\")]),e._v(" 打头。比如说，函数和数据定义分别由 "),v("code",[e._v("\\func")]),e._v(" 和 "),v("code",[e._v("\\data")]),e._v(" 开头。")]),e._v(" "),v("p",[e._v("如果数字字面量在项中出现，那么他们总是被解释为 "),v("code",[e._v("Nat")]),e._v(" 或 "),v("code",[e._v("Int")]),e._v(" 类型的值；非负的数字字面量是 "),v("code",[e._v("Nat")]),e._v(" 类型的，而负的数字字面量是 "),v("code",[e._v("Int")]),e._v(" 类型的。")]),e._v(" "),v("p",[e._v("Arend 在标识符的选择中提供了相当大的自由度。除了一小部分例外，Arend 中定义、变量等的名字可以包含大小写字母、数字以及 "),v("code",[e._v("~!@#$%^&*-+=<>?/|[]:_")]),e._v(" 中的任意字符。")]),e._v(" "),v("h1",{attrs:{id:"函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[e._v("#")]),e._v(" 函数")]),e._v(" "),v("p",[e._v("函数定义由 "),v("code",[e._v("\\func")]),e._v(" 关键字打头。Arend 中的函数是数学意义上的函数。这也就是说，他们是"),v("em",[e._v("纯粹")]),e._v("的，而且不会和环境进行 I/O 交互。")]),e._v(" "),v("p",[e._v("一个函数的定义至少要包含函数的名字和函数体。比如说，值为 0 且没有参数的常量函数 "),v("code",[e._v("f")]),e._v(" 可以如此定义：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func f => 0 -- 常量函数\n{- Haskell:\n   f = 0\n-}\n")])])]),v("p",[v("code",[e._v("f")]),e._v(" 的函数体只包括一个数字 "),v("code",[e._v("0")]),e._v("（他的类型是 "),v("code",[e._v("Nat")]),e._v("）。类型检查器推断出来 "),v("code",[e._v("f")]),e._v(" 的结果类型也为 "),v("code",[e._v("Nat")]),e._v("，但是我们也可以显式指定这个类型：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func f' : Nat => 0 -- 常量，带有显式指定的类型\n{- Haskell:\n   f :: Nat\n   f = 0\n-}\n")])])]),v("p",[e._v("如果要定义一个有参数的函数，我们可以在函数的名字后面指定他的参数和参数的类型，就像下面这样：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func id (x : Nat) => x -- 自然数的恒等函数\n\\func id' (x : Nat) : Nat => x -- 跟上一个一样，但是有显式指定的结果类型\n{- Haskell:\n   id :: Nat -> Nat\n   id x = x\n-}\n\\func foo (x _ : Nat) (_ : Int) => x -- 返回第一个参数\n{- Haskell:\n   foo :: Nat -> Nat -> Int -> Nat\n   foo x y z = x\n-}\n")])])]),v("p",[e._v("在 "),v("code",[e._v("foo")]),e._v(" 的定义中可以看到，我们可以忽略掉没用到的参数的名字，用一个占位符 "),v("code",[e._v("_")]),e._v(" 作替代。如果有几个相邻的参数有相同的类型，那么就可以把他们合并起来："),v("code",[e._v("(x _ : Nat)")]),e._v(" 和 "),v("code",[e._v("(x : Nat) (_ : Nat)")]),e._v(" 是等价的。")]),e._v(" "),v("p",[e._v("注意在 Arend 里，参数的类型必须指定，这跟 Haskell 是不一样的：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("-- \\func id'' x => x -- 这个定义是错的！\n{- Haskell:\n   id'' x = x\n-}\n")])])]),v("p",[e._v("函数的参数也可以通过 lambda 表达式被等价地从签名上移到函数体里：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("-- 参数的类型不能被推断出来，和前面提到的相同\n\\func foo' => \\lam (x _ : Nat) (_ : Int) => x\n-- 但是如果结果类型被显式指定了，那么参数的类型就可以省略掉\n\\func foo'' : Nat -> Nat -> Int -> Nat => \\lam x _ _ => x\n{- Haskell:\n   foo'' :: Nat -> Nat -> Int -> Nat\n   foo'' = \\x y z -> x\n-}\n")])])]),v("p",[e._v("在这个例子里，我们直接通过在 "),v("code",[e._v("=>")]),e._v(" 后书写一个项就定义了函数体。当然，定义函数也有更加复杂的方法，这种方法在定义递归函数之类的函数时会派上用场。这种方法叫做"),v("em",[e._v("模式匹配")]),e._v("，我们"),v("a",{attrs:{href:"#%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89"}},[e._v("马上")]),e._v("就会学习这种函数。")]),e._v(" "),v("h1",{attrs:{id:"中缀运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#中缀运算符"}},[e._v("#")]),e._v(" 中缀运算符")]),e._v(" "),v("p",[e._v("所有的二元运算符默认是前缀的，就跟普通函数一样。如果要定义一个中缀运算符，则应该在运算符的名字前加上关键字 "),v("code",[e._v("\\infix")]),e._v("、"),v("code",[e._v("\\infixl")]),e._v(" 或 "),v("code",[e._v("\\infixr")]),e._v(" 的其中一个，再加上一个正整数表明他的优先级：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func \\infixl 6 $$ (x y : Nat) => x\n\\func test => 3 $$ 7 -- test 返回 3\n{- Haskell:\n   infixl 6 $$\n   ($$) x y = x\n   test = 3 $$ 7\n-}\n")])])]),v("p",[e._v("优先级可以是 1 到 9 之间的任何正整数。")]),e._v(" "),v("p",[e._v("任何二元运算符，即使没被定义成中缀的，也可以在两边加上 "),v("code",[e._v("` `")]),e._v(" 后以中缀方式使用。")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func ff (x y : Nat) => x\n\\func ff_test => 0 `ff` 1\n{- Haskell:\n   ff x y = x\n   ff_test = 3 `ff` 7\n-}\n")])])]),v("p",[e._v("中缀运算符也可以以前缀方式使用：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func \\infix 6 %% (x y : Nat) => x\n\\func %%-test => %% 3 7 -- 不需要写 (%%)\n{- Haskell:\n   infix 5 %%\n   (%%) x y = x\n   pp_test = (%%) 3 7\n-}\n")])])]),v("blockquote",[v("p",[e._v("练习 1：定义函数 "),v("code",[e._v("f1")]),e._v("、"),v("code",[e._v("f2")]),e._v("、"),v("code",[e._v("f3")]),e._v("、"),v("code",[e._v("f4")]),e._v("、"),v("code",[e._v("f5")]),e._v(" 和 "),v("code",[e._v("f6")]),e._v(" 的优先级，使得函数 "),v("code",[e._v("test")]),e._v(" 通过类型检查。")])]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func f1 (x y : Nat) => x\n\\func f2 : Nat => 0\n\\func f3 (f : Nat -> Nat) (z : Nat) : Int => 0\n\\func f4 : Nat => 0\n\\func f5 => f1\n\\func f6 => f4\n\n\\func test => f1 f2 f3 f4 f5 f6\n")])])]),v("h1",{attrs:{id:"数据定义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据定义"}},[e._v("#")]),e._v(" 数据定义")]),e._v(" "),v("p",[e._v("数据定义允许我们通过指定「生成元素」来定义定义新的"),v("em",[e._v("归纳类型")]),e._v("和"),v("em",[e._v("高阶归纳类型")]),e._v("，这些「生成元素」叫做"),v("em",[e._v("构造器")]),e._v("。")]),e._v(" "),v("p",[e._v("最简单的情况是构造器没有任何参数，此时一个归纳类型只是他的构造器构成的有限集合。例如，空类型 "),v("code",[e._v("Empty")]),e._v("、有一个元素的单元类型 "),v("code",[e._v("Unit")]),e._v(" 和有两个元素 "),v("code",[e._v("true")]),e._v("、"),v("code",[e._v("false")]),e._v(" 的布尔类型 "),v("code",[e._v("Bool")]),e._v(" 可以如下定义：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\data Empty\n{- Haskell:\n   data Empty\n-}\n\n\\data Unit | unit\n{- Haskell:\n   data Unit = Unit\n-}\n\n\\data Bool | false | true\n{- Haskell:\n   data Bool = False | True\n-}\n")])])]),v("p",[e._v("定义一个 "),v("code",[e._v("Bool")]),e._v(" 的函数基本上就是通过称为"),v("em",[e._v("模式匹配")]),e._v("的方法，分别定义他在 "),v("code",[e._v("true")]),e._v(" 和 "),v("code",[e._v("false")]),e._v(" 时的值。比如，函数 "),v("code",[e._v("not")]),e._v(" 和 "),v("code",[e._v("if")]),e._v(" 可以这样定义：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func not (x : Bool) : Bool \\with -- 可以省略关键词 \\with\n  | true => false\n  | false => true\n{- Haskell:\n   not :: Bool -> Bool\n   not True = False\n   not False = True\n-}\n\n\\func if (x : Bool) (t e : Nat) : Nat \\elim x\n  | true => t\n  | false => e\n{- Haskell:\n   if :: Bool -> Nat -> Nat -> Nat\n   if True t e = t\n   if False t e = e\n-}\n")])])]),v("p",[e._v("许多时候，归纳类型有一些有参数的构造器。和函数的参数不同的是，我们可以省略参数名称，写 "),v("code",[e._v("cons T")]),e._v(" 而非 "),v("code",[e._v("cons (_ : T)")]),e._v("。")]),e._v(" "),v("p",[e._v("这些参数的类型可能是正在定义的这个归纳类型本身，一会我们就会在定义自然数时看到这种情况。然而有一个重要的限制：所有归纳类型在他的构造器的参数类型中必须是"),v("em",[e._v("严格为正")]),e._v("的，也就是说，这个类型不能出现在 "),v("code",[e._v("->")]),e._v(" 的左边。一旦没有这个限制，那么我们就可以定义「无类型 lambda 演算的所有项」的类型 "),v("code",[e._v("K")]),e._v("。更进一步地，不会停机的项就可以是 "),v("code",[e._v("K")]),e._v(" 的元素。")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\data K | k (K -> K)\n\\func I => k (\\lam x => x)\n\\func Kc => k (\\lam x => k (\\lam _ => x))\n\\func app (f a : K) : K \\elim f\n  | k f' => f' a\n\\func omega => k (\\lam x => app x x)\n")])])]),v("p",[e._v("看另一个例子——表示自然数的类型。Prelude 中的 "),v("code",[e._v("Nat")]),e._v(" 类型和 "),v("code",[e._v("+")]),e._v("、"),v("code",[e._v("*")]),e._v(" 运算符可以定义如下：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\data Nat | zero | suc Nat\n\n-- 这两个函数是等价的\n\\func three => suc (suc (suc zero))\n\\func three' => 3\n\n-- 数字没有大小限制\n\\func bigNumber => 1000000000000000000000000\n\n\\func \\infixl 6 + (x y : Nat) : Nat \\elim y\n  | 0 => x\n  | suc y => suc (x + y)\n{- Haskell:\n   (+) :: Nat -> Nat -> Nat\n   x + Zero = x\n   x + Suc y = Suc (x + y)\n-}\n\n-- 设 n 是一个变量，那么 n + 2 就会被展开成 suc (suc n)，\n-- 但是 2 + n 不会，因为他已经是标准形式了。\n-- 这个行为视 + 的定义而定，更精确地说，\n-- 是视选择哪一个参数进行模式匹配而定。\n\n\\func \\infixl 7 * (x y : Nat) : Nat \\elim y\n  | 0 => 0\n  | suc y => x * y + x\n{- Haskell:\n   (*) :: Nat -> Nat -> Nat\n   x * Zero = 0\n   x * Suc y = x * y + x\n-}\n")])])]),v("p",[e._v("这并不是定义自然数的唯一方式。刚才这个例子对应的是一元（一进制）的自然数表示。二元（二进制）的自然数可以像下面这样定义：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\data BinNat\n    | zero'\n    | sh+1 BinNat -- x*2+1\n    | sh+2 BinNat -- x*2+2\n")])])]),v("p",[e._v("从效率上看，这种定义很明显更优秀。然而，和上面 "),v("code",[e._v("Nat")]),e._v(" 的定义相比，在利用归纳法的证明中使用 "),v("code",[e._v("BinNat")]),e._v(" 这种定义非常不方便。事实上，Prelude 中的 "),v("code",[e._v("Nat")]),e._v(" 类型也很有效率，因为他的算术运算的实现是单独硬编码的。")]),e._v(" "),v("blockquote",[v("p",[e._v("练习 2：定义函数 "),v("code",[e._v("if")]),e._v("，使其接受一个布尔值 "),v("code",[e._v("b")]),e._v(" 和两个任意类型 "),v("code",[e._v("A")]),e._v(" 的值，并当 "),v("code",[e._v("b")]),e._v(" 等于 "),v("code",[e._v("true")]),e._v(" 时返回第一个值，否则返回第二个。")])]),e._v(" "),v("blockquote",[v("p",[e._v("练习 3：用 "),v("code",[e._v("if")]),e._v(" 定义 "),v("code",[e._v("||")]),e._v("。")])]),e._v(" "),v("blockquote",[v("p",[e._v("练习 4：定义自然数的幂和阶乘函数。")])]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func \\infixr 8 ^ (x y : Nat) => {?}\n\n\\func fac (x : Nat) => {?}\n")])])]),v("blockquote",[v("p",[e._v("练习 5：定义取模函数 "),v("code",[e._v("mod")]),e._v(" 和最大公约数函数 "),v("code",[e._v("gcd")]),e._v("。")])]),e._v(" "),v("h1",{attrs:{id:"停机与-div"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#停机与-div"}},[e._v("#")]),e._v(" 停机与 "),v("code",[e._v("div")])]),e._v(" "),v("p",[e._v("函数可以是递归的，但是他们不能随意地调用自己。如果对递归不加以限制，那么任何一个命题都可以被平凡地证明：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func theorem : 0 = 1 => theorem\n")])])]),v("p",[e._v("在依赖类型语言中，类型检查需要检查函数是否停机。这也就是说，语言不能是图灵完全的，因为在这种情况下停机问题是不可判定的。")]),e._v(" "),v("p",[e._v("内涵的 Martin-Lof 类型论可以避免这种问题，因为他确保了所有可以定义的函数都是"),v("em",[e._v("完全的")]),e._v("，也就是在任何输入上都会停机。因此，许多定理证明器都在他们类型系统的核心中包含 Martin-Lof 类型论，以此来确保所有函数都停机，并且所有递归函数都是通过"),v("em",[e._v("结构化递归")]),e._v("定义的。Arend 也是如此。")]),e._v(" "),v("p",[e._v("举个例子，考虑一下自然数的整除函数 "),v("code",[e._v("div")]),e._v("。一个显然（但不正确）的定义可能像下面这样：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func div (x y : Nat) : Nat => if (x < y) 0 (suc (div (x - y) y))\n")])])]),v("p",[e._v("这个定义有两个问题。1）"),v("code",[e._v("div x 0")]),e._v(" 不会停机；2）这个递归不是结构化的，因为结构化递归要求递归调用时的参数在比结构上原本的参数更简单。")]),e._v(" "),v("p",[e._v("很多情况下，我们可以通过添加额外的参数来把非结构化递归转换为结构化递归（这些额外的参数会随着递归层数加深而变得结构更为简单）。这个参数的初值可以设定为递归次数的上界：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func div (x y : Nat) => div' x x y\n  \\where\n    \\func div' (s x y : Nat) : Nat \\elim s\n        | 0 => 0\n        | suc s => if (x < y) 0 (suc (div' s (x - y) y))\n")])])]),v("h1",{attrs:{id:"多态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[e._v("#")]),e._v(" 多态")]),e._v(" "),v("p",[e._v("一些定义是多态的，也就是说他们以类型作为参数。这种定义的开头可以使用所有类型的类型 "),v("code",[e._v("\\Type")]),e._v("。比如说，多态的恒等函数可以这样写：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func id (A : \\Type) (a : A) => a\n{- Haskell:\n   id :: a -> a\n   id x = x\n-}\n\n\\func idType : \\Pi (A : \\Type) (a : A) -> A => id\n{- Haskell:\n   idType :: a -> a\n   idType = id\n-}\n")])])]),v("p",[e._v("类型 "),v("code",[e._v("\\Pi (a : A) -> B")]),e._v(" 叫做依赖函数类型，他是普通函数类型 "),v("code",[e._v("A -> B")]),e._v(" 的推广。依赖函数的值域可能会因为参数的改变而改变。比如说，类型 "),v("code",[e._v("\\Pi (b : Bool) -> if b Nat Bool")]),e._v(" 是这样一个函数的类型：他接受一个 "),v("code",[e._v("Bool")]),e._v(" 类型的参数，并且视参数返回 "),v("code",[e._v("Nat")]),e._v(" 或 "),v("code",[e._v("Bool")]),e._v("——如果 "),v("code",[e._v("b")]),e._v(" 是 "),v("code",[e._v("true")]),e._v("，则返回一个 "),v("code",[e._v("Nat")]),e._v("；否则返回一个 "),v("code",[e._v("Bool")]),e._v("。")]),e._v(" "),v("p",[e._v("类型 "),v("code",[e._v("\\Pi (A : \\Type) (a : A) -> A")]),e._v(" 也可以等价地写成 "),v("code",[e._v("\\Pi (A : \\Type) -> A -> A")]),e._v("，因为他的值域并不依赖第二个参数。这个类型的意思就是，一个接受某个类型 "),v("code",[e._v("A")]),e._v(" 并返回「一个类型为 "),v("code",[e._v("A -> A")]),e._v(" 的函数」的函数。")]),e._v(" "),v("p",[e._v("需要注意的是，"),v("code",[e._v("\\Type")]),e._v(" 事实上并不是"),v("em",[e._v("所有类型")]),e._v("的类型；著名的 Girard 悖论表明，内涵的 Martin-Lof 类型论和所有类型的类型并非连贯一致。要解决这个问题，我们将会引入一个全集的等级系统，但这留到"),v("RouterLink",{attrs:{to:"/posts/universes.html"}},[e._v("之后")]),e._v("再讨论。不过，用户在大多数时候都不需要考虑这些等级，因为他们会自动被推断并对用户隐藏起来；除非用户进行了不允许的循环定义，此时类型检查器会给出一个错误。")],1),e._v(" "),v("h1",{attrs:{id:"隐式参数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#隐式参数"}},[e._v("#")]),e._v(" 隐式参数")]),e._v(" "),v("p",[e._v("在应用函数时，经常会有一些参数是完全被其他参数所确定的。在这种情况下，用户可以让类型检查器推断这些参数并用 "),v("code",[e._v("_")]),e._v(" 作为占位符替代实际的参数。比如说，刚才定义的多态 "),v("code",[e._v("id")]),e._v(" 函数可以像这样应用：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func idTest => id _ 0\n")])])]),v("p",[e._v("其中类型检查器可以推断出来第一个参数为 "),v("code",[e._v("Nat")]),e._v("，因为这个参数必定是第二个参数的类型（也就是 "),v("code",[e._v("Nat")]),e._v("）。如果类型检查器无法推断出来一个参数应该是什么，那他就会生成一个错误。")]),e._v(" "),v("p",[e._v("如果我们发现一个定义的某个参数几乎总是被其他参数指定，那么我们就可以通过将这个参数放在花括号里来把他指定为"),v("em",[e._v("隐式参数")]),e._v("。这样，这个参数就可以被直接跳过：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func id' {A : \\Type} (a : A) => a\n\n\\func id'Test => id' 0\n\\func id'Test' => id' {Nat} 0 -- 隐式参数也可以被显式指定\n")])])]),v("p",[e._v("当然，进行参数推断的算法也不是全能的。比如下面这个例子：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func example' {n : Nat} (p : n + n = 3) => 0\n")])])]),v("p",[e._v("算法并不能从 "),v("code",[e._v("p")]),e._v(" 推断出来 "),v("code",[e._v("n")]),e._v("，因为 "),v("code",[e._v("n")]),e._v(" 是在函数 "),v("code",[e._v("+")]),e._v(" 的调用中出现的。如果我们调用 "),v("code",[e._v("example' pp")]),e._v("（其中 "),v("code",[e._v("pp : 8 = 3")]),e._v("），算法是不会推断出 "),v("code",[e._v("n")]),e._v(" 为 "),v("code",[e._v("4")]),e._v(" 的。")]),e._v(" "),v("p",[e._v("然而，算法可以推断出来下面这个例子中的 "),v("code",[e._v("n")]),e._v(" 和 "),v("code",[e._v("m")]),e._v("：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func example'' {n m : Nat} (p : suc n = m) => 0\n\\func example''Test (pp : 8 = 3) => example'' pp\n")])])]),v("p",[e._v("造成这种区别的原因是，在这个例子中 "),v("code",[e._v("n")]),e._v(" 和 "),v("code",[e._v("m")]),e._v(" 是在构造器（"),v("code",[e._v("suc")]),e._v("）和 "),v("code",[e._v("\\data")]),e._v("（"),v("code",[e._v("=")]),e._v(" 是用 "),v("code",[e._v("Path")]),e._v(" 定义的，而 "),v("code",[e._v("Path")]),e._v(" 是一个数据类型）的调用中出现的。因为 "),v("code",[e._v("\\data")]),e._v(" 和构造器是单射的，所以算法总是可以推断出 "),v("code",[e._v("n")]),e._v(" 和 "),v("code",[e._v("m")]),e._v("。比如，在 "),v("code",[e._v("example'' pp")]),e._v("（其中 "),v("code",[e._v("pp : 8 = 3")]),e._v("）中，算法可以推断出来 "),v("code",[e._v("m")]),e._v(" 必定为 "),v("code",[e._v("3")]),e._v(" 而 "),v("code",[e._v("n")]),e._v(" 必定为 "),v("code",[e._v("7")]),e._v("。")]),e._v(" "),v("h1",{attrs:{id:"列表与-append"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#列表与-append"}},[e._v("#")]),e._v(" 列表与 "),v("code",[e._v("append")])]),e._v(" "),v("p",[e._v("到现在我们已经讨论了定义多态的列表类型所需的全部内容：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\data List (A : \\Type) | nil | cons A (List A)\n{- Haskell:\n   data List a = Nil | Cons a (List a)\n-}\n\n-- 数据类型的所有参数都是他的构造器的隐式参数\n\\func emptyList => nil {Nat}\n\n-- 运算符 'append'\n\\func \\infixl 6 ++ {A : \\Type} (xs ys : List A) : List A \\elim xs\n  | nil => ys\n  | cons x xs => cons x (xs ++ ys)\n{- Haskell:\n   (++) :: List a -> List A -> List a\n   Nil ++ ys = ys\n   cons x xs ++ ys = cons x (xs ++ ys)\n-}\n")])])]),v("blockquote",[v("p",[e._v("练习 6：定义 "),v("code",[e._v("map")]),e._v(" 函数。")])]),e._v(" "),v("blockquote",[v("p",[e._v("练习 7：定义 "),v("code",[e._v("transpose")]),e._v(" 函数。他接受一个列表的列表，并将他视为一个矩阵，返回其转置后的结果（也是一个列表的列表）。")])]),e._v(" "),v("h1",{attrs:{id:"元组和-sigma-类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#元组和-sigma-类型"}},[e._v("#")]),e._v(" 元组和 Sigma- 类型")]),e._v(" "),v("p",[e._v("对于两个类型 "),v("code",[e._v("A")]),e._v(" 和 "),v("code",[e._v("B")]),e._v("，我们可以构造一个所有对 "),v("code",[e._v("(a, b)")]),e._v(" 的类型 "),v("code",[e._v("\\Sigma A B")]),e._v("，其中 "),v("code",[e._v("a : A")]),e._v("、"),v("code",[e._v("b : B")]),e._v("。类型 "),v("code",[e._v("\\Sigma A B")]),e._v(" 等价于下面定义的数据类型：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\data Pair | pair A B\n")])])]),v("p",[e._v("更广泛地说，任意一组类型 "),v("code",[e._v("A1")]),e._v("、...、"),v("code",[e._v("An")]),e._v(" 都可以构成所有元组 "),v("code",[e._v("(a1, ..., an)")]),e._v(" 的类型 "),v("code",[e._v("\\Sigma A1 ... An")]),e._v("，其中 "),v("code",[e._v("ai : Ai")]),e._v("。平凡地，"),v("code",[e._v("\\Sigma")]),e._v(" 等价于只有一个元素的 "),v("code",[e._v("Unit")]),e._v(" 类型。")]),e._v(" "),v("p",[e._v("元组可以是依赖的，其中每个类型 "),v("code",[e._v("Ai")]),e._v(" 可以依赖于 "),v("code",[e._v("a1")]),e._v("、...、"),v("code",[e._v("a{i-1}")]),e._v("。来看几个 "),v("code",[e._v("\\Sigma-")]),e._v(" 类型的例子：")]),e._v(" "),v("ul",[v("li",[e._v("类型 "),v("code",[e._v("\\Sigma (A : \\Type) (A -> A)")]),e._v(" 包含了所有对 "),v("code",[e._v("(A, f)")]),e._v("，其中 "),v("code",[e._v("A")]),e._v(" 是一个类型而 "),v("code",[e._v("f")]),e._v(" 是一个 "),v("code",[e._v("A -> A")]),e._v(" 的函数。")]),e._v(" "),v("li",[e._v("类型 "),v("code",[e._v("\\Sigma (b : Bool) (if b Nat Bool)")]),e._v(" 包含了所有对 "),v("code",[e._v("(b, e)")]),e._v("，其中 "),v("code",[e._v("b")]),e._v(" 是一个布尔值而 "),v("code",[e._v("e")]),e._v(" 是一个 "),v("code",[e._v("if b Nat Bool")]),e._v("。比如，"),v("code",[e._v("(true, 7)")]),e._v(" 和 "),v("code",[e._v("(false, true)")]),e._v(" 属于这个类型，但是 "),v("code",[e._v("(false, 7)")]),e._v(" 和 "),v("code",[e._v("(true, true)")]),e._v(" 则不属于。")]),e._v(" "),v("li",[e._v("我们之后会看到，对于任意一对自然数 "),v("code",[e._v("n, m : Nat")]),e._v("，都存在一个类型 "),v("code",[e._v("n < m")]),e._v("，表达了其中一个小于另一个，而这个类型的值就是这个命题的证明。于是我们可以定义类型 "),v("code",[e._v("\\Sigma (n : Nat) (n < 10)")]),e._v("，他包含了所有小于 "),v("code",[e._v("10")]),e._v(" 的自然数。更准确地说，这个类型包含了所有对 "),v("code",[e._v("(n, p)")]),e._v("，其中 "),v("code",[e._v("n")]),e._v(" 是一个自然数而 "),v("code",[e._v("p")]),e._v(" 是他小于 "),v("code",[e._v("10")]),e._v(" 的证明。")]),e._v(" "),v("li",[e._v("一个更有趣的例子：类型 "),v("code",[e._v("\\Sigma (n : Nat) (\\Sigma (k : Nat) (n = k * k))")]),e._v(" 包含了所有是平方数的自然数 "),v("code",[e._v("n")]),e._v("，更准确地说，他包含了所有对 "),v("code",[e._v("(n, p)")]),e._v("，其中 "),v("code",[e._v("n")]),e._v(" 是一个自然数而 "),v("code",[e._v("p : \\Sigma (k : Nat) (n = k * k)")]),e._v(" 是 "),v("code",[e._v("n")]),e._v(" 为平方数的证明。")])]),e._v(" "),v("p",[e._v("如果 "),v("code",[e._v("x")]),e._v(" 是类型 "),v("code",[e._v("\\Sigma A1 ... An")]),e._v(" 的一个值，则 "),v("code",[e._v("x")]),e._v(" 的第 i 个成员（i 是一个数字字面量）可以通过射影运算符 "),v("code",[e._v("x.i")]),e._v(" 访问。注意 eta 等价性对于 Sigma- 类型是成立的：如果 "),v("code",[e._v("x : \\Sigma A1 ... An")]),e._v("，那么 "),v("code",[e._v("(x.1, ..., x.n)")]),e._v(" 与 "),v("code",[e._v("x")]),e._v(" 在计算上是相等的。")]),e._v(" "),v("h1",{attrs:{id:"类型别名"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[e._v("#")]),e._v(" 类型别名")]),e._v(" "),v("p",[e._v("在依赖类型语言中不需要类型别名，因为我们可以直接定义一个函数返回某个类型，而这个函数就成为了那个类型的别名：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func NatList => List Nat\n{- Haskell:\n   type NatList = List Nat\n-}\n")])])]),v("h1",{attrs:{id:"命名空间和模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#命名空间和模块"}},[e._v("#")]),e._v(" 命名空间和模块")]),e._v(" "),v("p",[e._v("可以在一个定义后面添加一个 "),v("code",[e._v("\\where")]),e._v(" 块。和 Haskell 不同的是，"),v("code",[e._v("\\where")]),e._v(" 块是由整个定义共享的，而不是特定的某个子句：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func f => g \\where \\func g => 0\n")])])]),v("p",[e._v("在 "),v("code",[e._v("\\where")]),e._v(" 块中的定义几乎和普通的定义行为完全相同。仅有的区别是，他有不同的命名空间：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func gTest => f.g\n")])])]),v("p",[e._v("另外，我们也可以使用 "),v("code",[e._v("\\let")]),e._v("，但他比 Haskell 中的 'let' 更为简单且受限。在 Arend 里，"),v("code",[e._v("\\let")]),e._v(" 不能包含递归函数，并且每个变量只能依赖他之前定义的变量：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\func letExample => \\let\n    | x => 1\n    | y => x + x\n    \\in x + y * y\n")])])]),v("p",[e._v("在 Arend 中，定义可以通过模块来分组：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\module M1 \\where {\n    \\func f => 82\n    \\func g => 77\n    \\func h => 25\n}\n\n-- 定义 f、g 和 h 在当前命名空间不可用\n-- 应该通过前缀 M1. 来访问他们\n\\func moduleTest => (M1.f,M1.g,M1.h)\n")])])]),v("p",[e._v("如果一个模块被通过 "),v("code",[e._v("\\open")]),e._v(" 命令打开，那么他的定义可以直接被访问且无需前缀：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\module M2 \\where {\n   \\open M1\n   \\func t => f\n   \\func t' => g\n   \\func t'' => h\n}\n")])])]),v("p",[e._v("也可以只打开一个模块的一部分定义：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\module M3 \\where {\n   \\open M1(f,g)\n   \\func t => f\n   \\func t' => g\n   \\func t'' => M1.h -- h 没有被打开，所以必须通过前缀访问\n}\n")])])]),v("p",[e._v("所有定义都有一个对应的模块：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("\\module M4 \\where {\n   \\func functionModule => 34\n     \\where {\n       \\func f1 => 42\n       \\func f2 => 61\n       \\func f3 => 29\n     }\n   \\func t => functionModule.f1\n   \\func t' => functionModule.f2\n   \\func t'' => (f1, f3)\n     \\where \\open functionModule(f1,f3)\n\t-- 这个 \\open 影响到 t'' 的 \\where- 块，同时也影响 t'' 本身\n}\n")])])]),v("p",[e._v("命令 "),v("code",[e._v("\\import X")]),e._v(" 使得文件 X 在当前文件中可见。"),v("code",[e._v("\\import")]),e._v(" 同时也做了 "),v("code",[e._v("\\open")]),e._v(" 做的事，并且所有 "),v("code",[e._v("\\open")]),e._v(" 的语法也可以应用到 "),v("code",[e._v("\\import")]),e._v(" 上：")]),e._v(" "),v("div",{staticClass:"language-arend extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("-- 源码目录下应该包含一个叫做 Test.ard 的文件（并且包含 foobar 和 foobar2 的定义）\n-- 以及一个叫做 TestDir 的目录，里面包含文件 Test.ard 和 Test2.ard。\n\n\\import Test (foobar \\as foobar', foobar2)\n\\import TestDir.Test\n-- 如果我们想让一个文件可见，但不想打开他，那么可以这样写：\n\\import TestDir.Test2()\n")])])])])}),[],!1,null,null,null);a.default=t.exports}}]);